/**
 * A script used to generate a possible solution for the deconvolution operation
 * of X_log = X_norm + X_corr as described in our paper. Table 1 reports on two
 * possible values.
 */

def sigma = 1.0;
val N = 4000;
val lambda = 10.0;
val Xmax = 20.0;

val alpha = 0.5;
val delta = 1;

def normcdf(a:DMat):DMat = {
    0.5 + 0.5 * erf(a / math.sqrt(2));
};

def invnormcdf(a:DMat):DMat = {
    math.sqrt(2) * erfinv(2*a - 1);
};


val x = DMat(-N to N) * Xmax / N;
val xlog = DMat(-(2*N) to (2*N)) * Xmax / N;
val ylog = 1/(1 + exp(-xlog)); // "ground truth", S(X_i) in our paper.

val xnorm = DMat(-(3*N) to (3*N)) * Xmax / N;
val ynorm = normcdf(xnorm/sigma);

val xn2l = dzeros(2*N+1,1); // never used?

// This is `M` in our paper.
val convmat = dzeros(4*N+1, 2*N+1);
for (i <- 0 until (4*N+1)) {
    convmat(i, ?) = ynorm(0, i->(i+2*N+1));
}


// Min (AX - B)^2 = X.t A.t A X - 2 B.t A X + B.t B + lambda X.t X + delta X*@ min(X, 0);

// d/dX = 2 A.t A X - 2 B.t A + 2 lambda X + delta min(X, 0)

// (A.t A + lambda I) X = B.t A + delta(X < 0);

val cc = convmat ^* convmat;
val mm = (cc + mkdiag(lambda*dones(convmat.ncols,1)));
val minv = inv(mm);

var rr = (ylog * convmat).t;

val y0 = minv * rr;
var y1 = y0;

for (i <- 0 until 1) {
    val grad = minv * (mm * y1 - rr) + delta * min(y1, 0.0).asInstanceOf[DMat];
    y1 = y1 - alpha * grad;
}


def evalf(y:DMat):Double = {
    maxi(abs(convmat * max(y, 0.0) - ylog.t)).dv;
};

// Final result for C_\sigma, where we cut off values at 0 (so no negatives).
val y = max(y0,0.0).asInstanceOf[DMat];

plot(y);
val e0 = evalf(y0);
val e1 = evalf(y1);

saveDMat("norm2log%d_%d_%2.1f.txt" format (N, Xmax.toInt, sigma), (x.t \ y))
