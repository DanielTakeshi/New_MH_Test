// General purpose, multidimensional gaussian posterior simulation

:silent
val tt = 100;                                // minibatch size
val v0 = math.sqrt(1f*tt/nn).toFloat;            // minibatch proposal scaling
val nn = 1000000;                                // dataset size
val popt = 1f;                                   // optimal full-data proposal scale
val temp = 1;                                    // temperature
val m = 100;                                     // dimension
val n = 100000;                                  // number of samples - for estimation only
val sigma = 1f;                                  // x sigma (per coordinate)
val nstd = 2f;

val v = v0 * popt;


// First estimate the mean and std of sum(xi)
val xmsigma = sigma/math.sqrt(tt).toFloat        // sigma for xmean
val xssigma = math.sqrt(3).toFloat * xmsigma * xmsigma; // sigma for xsigma

val xmean = normrnd(0,xmsigma,m,n);              // x mean and var samples
val xvar = normrnd(xmsigma*xmsigma,xssigma*xssigma,m,n);

// Now generate target distribution samples
val tsigma = sigma*math.sqrt(1f*temp/nn).toFloat // target sigma (per coordinate)
val target = normrnd(0,tsigma,m,n);              // target samples

// Now generate proposal distribution samples
val psigma = v * tsigma/math.sqrt(m).toFloat;    // proposal sigma
val prop = normrnd(0,psigma,m,n);                // proposal samples

// Simulate the new M-H test
val lprop = nn/(temp*sigma*sigma) * prop;
val llike = lprop dot (xmean - target - prop * 0.5f);
val lvar = (lprop *@ lprop) dot xvar;
val sizem = tt /lvar;

// Simulate the tail bound methods
val llike2 = lprop dot ( - target - prop * 0.5f);
val logu = ln(rand(1,n));
val diff = llike2 - logu;
val varlog = 1f/(nstd*nstd) * diff *@ diff;
val svarlog = varlog / (lprop dot lprop);
val sizen = 1f / max(1f/nn, svarlog);

hist(llike, 100);

variance(llike);
val acc = exp(min(llike,0));
val acc2 = 1 / (1 + exp(-llike));
val acc3 = exp(min(llike2,0));
val accept = mean(acc);
val accept2 = mean(acc2);
val accept3 = mean(acc3);
val sz = prop dot prop;
val speed = mean(acc *@ sz);
val speed2 = mean(acc2 *@ sz);
val speed3 = mean(acc3 *@ sz);

:silent
println("v=%5.4f, lvar=%5.4f, acc=%5.4f, speed=%5.4g" format (v, mean(lvar).dv, accept.dv, speed.dv));
println("v=%5.4f, lvar=%5.4f, acc=%5.4f, speed=%5.4g, avg batch=%5.4f" format (v, mean(lvar).dv, accept2.dv, speed2.dv, mean(sizem).dv));
println("v=%5.4f, lvar=%5.4f, acc=%5.4f, speed=%5.4g, avg batch=%5.4f" format (v, mean(lvar).dv, accept3.dv, speed3.dv, mean(sizen).dv));


