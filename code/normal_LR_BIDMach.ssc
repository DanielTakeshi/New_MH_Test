:silent

/**
 * This is going to test logistic regression directly on the MNIST8M dataset
 * using normal BIDMach's Generalized Linear Models with the Grad.scala updater.
 * It's to help me benchmark, compare with, debug, and implement the
 * MHTest.scala updater.
 *
 * Notes:
 *
 * > The dataset is not on GitHub and has already been shuffled.
 *
 * > We used -1/+1 in New_MH_Test, but BIDMach requires 0/1.
 *
 * > I'm following the scripts in BIDMach, but another way is to put all this
 *      together into GLM.learner(...) with five arguments. Haven't gotten that
 *      one working, though.
 *
 * > CRITICAL: The data augmentation is not done correctly. Logistic regression
 *      should be getting roughly 90-94% accuracy on MNIST. However, I'm getting
 *      really high values on the held-out testing: 0.9930 for 4 training passes,
 *      0.9941 for 100.9947 for 20, 0.9954 for 100, etc. This is too high,
 *      indicating that the data is too closely related.
 *
 * (c) January 2017 by Daniel Seita
 */

val tr = loadFMat("/home/daniel/data/FINAL_MNIST8M_TRAIN_100000.fmat.lz4")
val te = loadFMat("/home/daniel/data/FINAL_MNIST8M_TEST_20000.fmat.lz4")

val tr_data = tr(0->784,?)
val tr_labels = tr(784,?)
tr_labels(find(tr_labels == -1)) = 0

val te_data = te(0->784,?)
val te_labels = te(784,?)
te_labels(find(te_labels == -1)) = 0

val te_preds = zeros(1,20000)

:silent
// Logistic regression from GLM, type=1, with test data pre-loaded.
// nn = the training learner (model, datasource, updater), with options mopts
// mm = the predicting learner, with options nopts

val (nn, nopts) = GLM.learnerX(tr_data, tr_labels, 1)
nopts.npasses = 100
nopts.batchSize = 500
nopts.lrate = 0.05
nopts.what
val model = nn.model.asInstanceOf[GLM]
nn.train

val (mm, mopts) = GLM.predictor(model, te_data)
mopts.addConstFeat = nopts.addConstFeat
mopts.batchSize = 100
mopts.links = nopts.links
mm.predict

:silent
val te_preds = FMat(mm.preds(0))
te_preds(find(te_preds < 0.5)) = 0
te_preds(find(te_preds >= 0.5)) = 1
:silent

val accuracy = (te_labels == te_preds).nnz.toFloat / (te_preds.nrows*te_preds.ncols)
print("\nAccuracy at 0.5: %.4f\n" format accuracy)
